//
// NOTE: This file has been generated by RSPT (the Really Simple Parser Tool).
//       Do not modify the contents of this file as it will be overwritten!
//
#pragma once;

class CIcbScriptGrammar
{
private:
    const TCHAR* _input;
    int _size;

public:
    CIcbScriptGrammar() : _input(NULL), _size(0) { }

    bool Parse_SCRIPT(const TCHAR* input, int size, CIcbScriptPtr& output, int& pos) {
        _input = input;
        _size  = size;
        pos    = 0;
        /*output = default(CIcbScriptPtr);*/
        return nt_SCRIPT(pos, output) && pos == _size;
    }

private:
    bool nt_SCRIPT(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            errmsg = 0;
            void* output1 /*= default(void*)*/;
            int pos1 = pos0;
            if(nt_WS(pos1, output1)) {
                int pos2 = pos1;
                if(nt_ROOT(pos2, output)) {
                    void* output3 /*= default(void*)*/;
                    int pos3 = pos2;
                    if(nt_WS(pos3, output3)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_WS(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tset(pos1, _T(" \t\r\n"), 4)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("/*"), 2)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_CM(pos2, output2)) {
                    void* output3 /*= default(void*)*/;
                    int pos3 = pos2;
                    if(nt_WS(pos3, output3)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_CM(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("*/"), 2)) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tnotset(pos1, _T("*"), 1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_CM(pos2, output2)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '*')) {
                int pos2 = pos1;
                if(tnotset(pos2, _T("/"), 1)) {
                    void* output3 /*= default(void*)*/;
                    int pos3 = pos2;
                    if(nt_CM(pos3, output3)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_ROOT(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            errmsg = err000;
            int pos1 = pos0;
            if(nt_CDL_EXPR(pos1, output)) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_CDL_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_LOR_EXPR(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_CDL_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_CDL_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '?')) {
                errmsg = err003;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_LOR_EXPR(pos3, output3)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(tc(pos5, ':')) {
                                errmsg = err003;
                                void* output6 /*= default(void*)*/;
                                int pos6 = pos5;
                                if(nt_WS(pos6, output6)) {
                                    CIcbScriptPtr output7 /*= default(CIcbScriptPtr)*/;
                                    int pos7 = pos6;
                                    if(nt_CDL_EXPR(pos7, output7)) {
                                        output = type->CompileOp_Cndtnl(CIcbScriptLocation(_input, _size, pos), output, output3, output7);
                                        pos = pos7;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_LOR_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_LAND_EXPR(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_LOR_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_LOR_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            CIcbScriptType::FCompileOp2 output1 /*= default(CIcbScriptType::FCompileOp2)*/;
            int pos1 = pos0;
            if(nt_LOR_OP(pos1, output1)) {
                errmsg = err001;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_LAND_EXPR(pos3, output3)) {
                        output=(type->*output1)(CIcbScriptLocation(_input, _size, pos), output, output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_LOR_OPEXPR(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_LOR_OP(int& pos, CIcbScriptType::FCompileOp2& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("||"), 2)) {
                output = &CIcbScriptType::CompileOp_LogicalOr;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_LAND_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_BOR_EXPR(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_LAND_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_LAND_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            CIcbScriptType::FCompileOp2 output1 /*= default(CIcbScriptType::FCompileOp2)*/;
            int pos1 = pos0;
            if(nt_LAND_OP(pos1, output1)) {
                errmsg = err001;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_BOR_EXPR(pos3, output3)) {
                        output=(type->*output1)(CIcbScriptLocation(_input, _size, pos), output, output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_LAND_OPEXPR(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_LAND_OP(int& pos, CIcbScriptType::FCompileOp2& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("&&"), 2)) {
                output = &CIcbScriptType::CompileOp_LogicalAnd;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_BOR_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_BAND_EXPR(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_BOR_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_BOR_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            CIcbScriptType::FCompileOp2 output1 /*= default(CIcbScriptType::FCompileOp2)*/;
            int pos1 = pos0;
            if(nt_BOR_OP(pos1, output1)) {
                errmsg = err001;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_BAND_EXPR(pos3, output3)) {
                        output=(type->*output1)(CIcbScriptLocation(_input, _size, pos), output, output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_BOR_OPEXPR(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_BOR_OP(int& pos, CIcbScriptType::FCompileOp2& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '|')) {
                output = &CIcbScriptType::CompileOp_BitwiseOr;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_BAND_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_EQU_EXPR(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_BAND_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_BAND_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            CIcbScriptType::FCompileOp2 output1 /*= default(CIcbScriptType::FCompileOp2)*/;
            int pos1 = pos0;
            if(nt_BAND_OP(pos1, output1)) {
                errmsg = err001;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_EQU_EXPR(pos3, output3)) {
                        output=(type->*output1)(CIcbScriptLocation(_input, _size, pos), output, output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_BAND_OPEXPR(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_BAND_OP(int& pos, CIcbScriptType::FCompileOp2& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '&')) {
                output = &CIcbScriptType::CompileOp_BitwiseAnd;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_EQU_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_CMP_EXPR(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_EQU_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_EQU_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            CIcbScriptType::FCompileOp2 output1 /*= default(CIcbScriptType::FCompileOp2)*/;
            int pos1 = pos0;
            if(nt_EQU_OP(pos1, output1)) {
                errmsg = err001;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_CMP_EXPR(pos3, output3)) {
                        output=(type->*output1)(CIcbScriptLocation(_input, _size, pos), output, output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_EQU_OPEXPR(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_EQU_OP(int& pos, CIcbScriptType::FCompileOp2& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("=="), 2)) {
                output = &CIcbScriptType::CompileOp_Equal;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("!="), 2)) {
                output = &CIcbScriptType::CompileOp_NotEqual;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_CMP_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_SHF_EXPR(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_CMP_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_CMP_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            CIcbScriptType::FCompileOp2 output1 /*= default(CIcbScriptType::FCompileOp2)*/;
            int pos1 = pos0;
            if(nt_CMP_OP(pos1, output1)) {
                errmsg = err001;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_SHF_EXPR(pos3, output3)) {
                        output=(type->*output1)(CIcbScriptLocation(_input, _size, pos), output, output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_CMP_OPEXPR(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_CMP_OP(int& pos, CIcbScriptType::FCompileOp2& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("<="), 2)) {
                output = &CIcbScriptType::CompileOp_LessEqual;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T(">="), 2)) {
                output = &CIcbScriptType::CompileOp_GreaterEqual;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '<')) {
                output = &CIcbScriptType::CompileOp_Less;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '>')) {
                output = &CIcbScriptType::CompileOp_Greater;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_SHF_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_ADD_EXPR(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_SHF_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_SHF_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            CIcbScriptType::FCompileOp2 output1 /*= default(CIcbScriptType::FCompileOp2)*/;
            int pos1 = pos0;
            if(nt_SHF_OP(pos1, output1)) {
                errmsg = err001;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_ADD_EXPR(pos3, output3)) {
                        output=(type->*output1)(CIcbScriptLocation(_input, _size, pos), output, output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_SHF_OPEXPR(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_SHF_OP(int& pos, CIcbScriptType::FCompileOp2& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("<<"), 2)) {
                output = &CIcbScriptType::CompileOp_ShiftLeft;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T(">>"), 2)) {
                output = &CIcbScriptType::CompileOp_ShiftRight;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_ADD_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_MUL_EXPR(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_ADD_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_ADD_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            CIcbScriptType::FCompileOp2 output1 /*= default(CIcbScriptType::FCompileOp2)*/;
            int pos1 = pos0;
            if(nt_ADD_OP(pos1, output1)) {
                errmsg = err001;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_MUL_EXPR(pos3, output3)) {
                        output=(type->*output1)(CIcbScriptLocation(_input, _size, pos), output, output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_ADD_OPEXPR(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_ADD_OP(int& pos, CIcbScriptType::FCompileOp2& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '+')) {
                output = &CIcbScriptType::CompileOp_Addition;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '-')) {
                output = &CIcbScriptType::CompileOp_Subtraction;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_MUL_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_NOT_EXPR(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_MUL_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_MUL_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            CIcbScriptType::FCompileOp2 output1 /*= default(CIcbScriptType::FCompileOp2)*/;
            int pos1 = pos0;
            if(nt_MUL_OP(pos1, output1)) {
                errmsg = err001;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_NOT_EXPR(pos3, output3)) {
                        output=(type->*output1)(CIcbScriptLocation(_input, _size, pos), output, output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_MUL_OPEXPR(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_MUL_OP(int& pos, CIcbScriptType::FCompileOp2& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '*')) {
                output = &CIcbScriptType::CompileOp_Multiplictn;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '/')) {
                output = &CIcbScriptType::CompileOp_Division;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '%')) {
                output = &CIcbScriptType::CompileOp_Modulus;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_NOT_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            CIcbScriptType::FCompileOp1 output1 /*= default(CIcbScriptType::FCompileOp1)*/;
            int pos1 = pos0;
            if(nt_NOT_OP(pos1, output1)) {
                errmsg = err002;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_NOT_EXPR(pos3, output3)) {
                        output = (type->*output1)(CIcbScriptLocation(_input, _size, pos), output3);
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(nt_SCOPE_EXPR(pos1, output)) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_NOT_OP(int& pos, CIcbScriptType::FCompileOp1& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '!')) {
                output = &CIcbScriptType::CompileOp_LogicalNot;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '~')) {
                output = &CIcbScriptType::CompileOp_BitwiseNot;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_SCOPE_EXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_LEAF(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_SCOPE_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_SCOPE_OPEXPR(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '.')) {
                errmsg = err008;
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_LEAF(pos3, output3)) {
                        output=type->CompileOp_Scope(CIcbScriptLocation(_input, _size, pos), output, output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_SCOPE_OPEXPR(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_LEAF(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '(')) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_ROOT(pos3, output)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            errmsg = err006;
                            int pos5 = pos4;
                            if(tc(pos5, ')')) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(nt_LITERAL(pos1, output)) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            CIcbString output1 /*= default(CIcbString)*/;
            int pos1 = pos0;
            if(nt_SYMBOL(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    TIcbArray<CIcbScriptPtr> output3 /*= default(TIcbArray<CIcbScriptPtr>)*/;
                    int pos3 = pos2;
                    if(nt_ARGLIST(pos3, output3)) {
                        output = type->CompileFunction(CIcbScriptLocation(_input, _size, pos), output1, output3);;
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            CIcbString output1 /*= default(CIcbString)*/;
            int pos1 = pos0;
            if(nt_SYMBOL(pos1, output1)) {
                output = type->CompileSymbol(CIcbScriptLocation(_input, _size, pos), output1);
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_ARGLIST(int& pos, TIcbArray<CIcbScriptPtr>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '(')) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_ROOT(pos3, output3)) {
                        output.Add(output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            errmsg = err006;
                            int pos5 = pos4;
                            if(nt_ARGLIST_TAIL(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '(')) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(tc(pos3, ')')) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_ARGLIST_TAIL(int& pos, TIcbArray<CIcbScriptPtr>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, ',')) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_ROOT(pos3, output3)) {
                        output.Add(output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            errmsg = err006;
                            int pos5 = pos4;
                            if(nt_ARGLIST_TAIL(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, ')')) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_LITERAL(int& pos, CIcbScriptPtr& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("false"), 5)) {
                output = type->CompileConst(CIcbScriptLocation(_input, _size, pos), false);
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("true"), 4)) {
                output = type->CompileConst(CIcbScriptLocation(_input, _size, pos), true);
                pos = pos1;
                return true;
            }
        }
        if(true) {
            CIcbString output1 /*= default(CIcbString)*/;
            int pos1 = pos0;
            if(nt_LITERAL_STRING(pos1, output1)) {
                output = type->CompileConst(CIcbScriptLocation(_input, _size, pos), output1);
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int output1 /*= default(int)*/;
            int pos1 = pos0;
            if(nt_LITERAL_INTEGER(pos1, output1)) {
                output = type->CompileConst(CIcbScriptLocation(_input, _size, pos), output1);
                pos = pos1;
                return true;
            }
        }
        if(true) {
            TIcbArray<CIcbScriptPtr> output1 /*= default(TIcbArray<CIcbScriptPtr>)*/;
            int pos1 = pos0;
            if(nt_LITERAL_ARRAY(pos1, output1)) {
                output = type->CompileArray(CIcbScriptLocation(_input, _size, pos), output1);;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_LITERAL_STRING(int& pos, CIcbString& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '\"')) {
                errmsg = err004;
                TIcbArray<TCHAR> output2 /*= default(TIcbArray<TCHAR>)*/;
                int pos2 = pos1;
                if(nt_LITERAL_STRING_CHAR_SEQ(pos2, output2)) {
                    int pos3 = pos2;
                    if(tc(pos3, '\"')) {
                        output = CIcbString(output2.GetData(), output2.GetSize());
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_LITERAL_STRING_CHAR_SEQ(int& pos, TIcbArray<TCHAR>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_LITERAL_STRING_CHAR(pos1, output)) {
                int pos2 = pos1;
                if(nt_LITERAL_STRING_CHAR_SEQ(pos2, output)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_LITERAL_STRING_CHAR(int& pos, TIcbArray<TCHAR>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tnotset(pos1, _T("\"\r\n"), 3)) {
                output.Add(_input[pos0]);
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_LITERAL_INTEGER(int& pos, int& output) {
        int pos0 = pos;
        if(true) {
            output = 0;
            int pos1 = pos0;
            if(nt_LITERAL_INTEGER_DIGIT(pos1, output)) {
                int pos2 = pos1;
                if(nt_LITERAL_INTEGER_DIGIT_SEQ(pos2, output)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        return false;
    }

    bool nt_LITERAL_INTEGER_DIGIT(int& pos, int& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tset(pos1, _T("0123456789"), 10)) {
                output = output * 10 + _input[pos0] - '0';
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_LITERAL_INTEGER_DIGIT_SEQ(int& pos, int& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_LITERAL_INTEGER_DIGIT(pos1, output)) {
                int pos2 = pos1;
                if(nt_LITERAL_INTEGER_DIGIT_SEQ(pos2, output)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_LITERAL_ARRAY(int& pos, TIcbArray<CIcbScriptPtr>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '[')) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_ROOT(pos3, output3)) {
                        output.Add(output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            errmsg = err007;
                            int pos5 = pos4;
                            if(nt_LITERAL_ARRAY_TAIL(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    bool nt_LITERAL_ARRAY_TAIL(int& pos, TIcbArray<CIcbScriptPtr>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, ',')) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    CIcbScriptPtr output3 /*= default(CIcbScriptPtr)*/;
                    int pos3 = pos2;
                    if(nt_ROOT(pos3, output3)) {
                        output.Add(output3);
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            errmsg = err007;
                            int pos5 = pos4;
                            if(nt_LITERAL_ARRAY_TAIL(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, ']')) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_SYMBOL(int& pos, CIcbString& output) {
        int pos0 = pos;
        if(true) {
            void* output1 /*= default(void*)*/;
            int pos1 = pos0;
            if(nt_SYMBOL_CHAR1(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_SYMBOL_CHAR2_SEQ(pos2, output2)) {
                    output = CIcbString(_input + pos0, pos2 - pos0);
                    pos = pos2;
                    return true;
                }
            }
        }
        return false;
    }

    bool nt_SYMBOL_CHAR1(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, 'a', 'z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, 'A', 'Z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '_')) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_SYMBOL_CHAR2(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, 'a', 'z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, 'A', 'Z')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '_')) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(trange(pos1, '0', '9')) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_SYMBOL_CHAR2_SEQ(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            void* output1 /*= default(void*)*/;
            int pos1 = pos0;
            if(nt_SYMBOL_CHAR2(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_SYMBOL_CHAR2_SEQ(pos2, output2)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool ts(int& pos, const TCHAR* s, int slen) {
        for(int i = 0; i < slen; i++) {
            if(pos >= _size || _input[pos] != s[i]) return false;
            pos++;
        }
        return true;
    }

    bool tc(int& pos, TCHAR c) {
        if(pos >= _size || _input[pos] != c) return false;
        pos++;
        return true;
    }

    bool tset(int& pos, const TCHAR* s, int slen) {
        for(int i = 0; i < slen; i++) {
            if(pos < _size && s[i] == _input[pos]) {
                pos++;
                return true;
            }
        }
        return false;
    }

    bool trange(int& pos, TCHAR c1, TCHAR c2) {
        if(pos >= _size || _input[pos] < c1 || _input[pos] > c2) return false;
        pos++;
        return true;
    }

    bool tnotset(int& pos, const TCHAR* s, int slen) {
        for(int i = 0; i < slen; i++) {
            if(pos >= _size || s[i] == _input[pos]) {
                return false;
            }
        }
        pos++;
        return true;
    }

    
public:
	const WCHAR*          errmsg;
	const CIcbScriptType* type;

private:
	static const WCHAR* err000;
	static const WCHAR* err001;
	static const WCHAR* err002;
	static const WCHAR* err003;
	static const WCHAR* err004;
	static const WCHAR* err006;
	static const WCHAR* err007;
	static const WCHAR* err008;

};
