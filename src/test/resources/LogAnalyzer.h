//
// NOTE: This file has been generated by RSPT (the Really Simple Parser Tool).
//       Do not modify the contents of this file as it will be overwritten!
//
#pragma once;

class CParser
{
private:
    const TCHAR* _input;
    int _size;

public:
    CParser() : _input(NULL), _size(0) { }

    bool Parse_FILTER(const TCHAR* input, int size, SFilter& output, int& pos) {
        _input = input;
        _size  = size;
        pos    = 0;
        /*output = default(SFilter);*/
        return nt_FILTER(pos, output) && pos == _size;
    }

private:
    bool nt_FILTER(int& pos, SFilter& output) {
        int pos0 = pos;
        if(true) {
            void* output1 /*= default(void*)*/;
            int pos1 = pos0;
            if(nt_WS(pos1, output1)) {
                int pos2 = pos1;
                if(nt_SELECT_CLAUSE(pos2, output)) {
                    int pos3 = pos2;
                    if(nt_WHERE_CLAUSE(pos3, output)) {
                        int pos4 = pos3;
                        if(nt_JOIN_CLAUSE(pos4, output)) {
                            int pos5 = pos4;
                            if(nt_GROUP_CLAUSE(pos5, output)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    bool nt_SELECT_CLAUSE(int& pos, SFilter& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("SELECT"), 6)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_DISTINCT(pos3, output.m_bDistinct)) {
                        int pos4 = pos3;
                        if(nt_STRING_EXPR(pos4, output.m_pSelect)) {
                            void* output5 /*= default(void*)*/;
                            int pos5 = pos4;
                            if(nt_WS(pos5, output5)) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_DISTINCT(int& pos, bool& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("DISTINCT"), 8)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    output=true;
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_WHERE_CLAUSE(int& pos, SFilter& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("WHERE"), 5)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_BOOL_EXPR(pos3, output.m_pCondition)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(nt_BOOL_EXPR(pos1, output.m_pCondition)) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_JOIN_CLAUSE(int& pos, SFilter& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("JOIN"), 4)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(ts(pos3, _T("ATTR"), 4)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            CIcbString output5 /*= default(CIcbString)*/;
                            int pos5 = pos4;
                            if(nt_STRING_CONST(pos5, output5)) {
                                output.m_sJoinAttr=output5;
                                void* output6 /*= default(void*)*/;
                                int pos6 = pos5;
                                if(nt_WS(pos6, output6)) {
                                    pos = pos6;
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_GROUP_CLAUSE(int& pos, SFilter& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("GROUP"), 5)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(ts(pos3, _T("BY"), 2)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(nt_GROUP_FUNC(pos5, output.m_pGroup)) {
                                void* output6 /*= default(void*)*/;
                                int pos6 = pos5;
                                if(nt_WS(pos6, output6)) {
                                    int pos7 = pos6;
                                    if(nt_GROUP_FILL(pos7, output)) {
                                        void* output8 /*= default(void*)*/;
                                        int pos8 = pos7;
                                        if(nt_WS(pos8, output8)) {
                                            int pos9 = pos8;
                                            if(ts(pos9, _T("AGGREGATE"), 9)) {
                                                void* output10 /*= default(void*)*/;
                                                int pos10 = pos9;
                                                if(nt_WS(pos10, output10)) {
                                                    int pos11 = pos10;
                                                    if(ts(pos11, _T("BY"), 2)) {
                                                        void* output12 /*= default(void*)*/;
                                                        int pos12 = pos11;
                                                        if(nt_WS(pos12, output12)) {
                                                            int pos13 = pos12;
                                                            if(nt_AGGREGATE_FUNC(pos13, output.m_pAggregate)) {
                                                                void* output14 /*= default(void*)*/;
                                                                int pos14 = pos13;
                                                                if(nt_WS(pos14, output14)) {
                                                                    pos = pos14;
                                                                    return true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_GROUP_FUNC(int& pos, FGroup*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("YEAR"), 4)) {
                output=&SFilter::GroupByYear;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("MONTH"), 5)) {
                output=&SFilter::GroupByMonth;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("DAY"), 3)) {
                output=&SFilter::GroupByDay;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("HOUR"), 4)) {
                output=&SFilter::GroupByHour;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("MINUTE"), 6)) {
                output=&SFilter::GroupByMinute;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("SECOND"), 6)) {
                output=&SFilter::GroupBySecond;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_AGGREGATE_FUNC(int& pos, FAggregate*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("AVERAGE"), 7)) {
                output=&SFilter::AggregateByAverage;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("CONCAT"), 6)) {
                output=&SFilter::AggregateByConcat;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("COUNT"), 5)) {
                output=&SFilter::AggregateByCount;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("SUM"), 3)) {
                output=&SFilter::AggregateBySum;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_GROUP_FILL(int& pos, SFilter& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("FILL"), 4)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(ts(pos3, _T("WITH"), 4)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            CIcbString output5 /*= default(CIcbString)*/;
                            int pos5 = pos4;
                            if(nt_STRING_CONST(pos5, output5)) {
                                output.m_bGroupFill=true; output.m_sGroupFill=output5;
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_WS(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tset(pos1, _T(" \t\r\n"), 4)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("/*"), 2)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_CM(pos2, output2)) {
                    void* output3 /*= default(void*)*/;
                    int pos3 = pos2;
                    if(nt_WS(pos3, output3)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_CM(int& pos, void*& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("*/"), 2)) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tnotset(pos1, _T("*"), 1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_CM(pos2, output2)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '*')) {
                int pos2 = pos1;
                if(tnotset(pos2, _T("/"), 1)) {
                    void* output3 /*= default(void*)*/;
                    int pos3 = pos2;
                    if(nt_CM(pos3, output3)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_BOOL_EXPR(int& pos, TIcbRefCntPtr<TExpr<bool>>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_BOOL_EXPR2(pos1, output)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_BOOL_OPEXPR(pos3, output)) {
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_BOOL_OPEXPR(int& pos, TIcbRefCntPtr<TExpr<bool>>& output) {
        int pos0 = pos;
        if(true) {
            EOperator output1 /*= default(EOperator)*/;
            int pos1 = pos0;
            if(nt_BOOL_OP(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    TIcbRefCntPtr<TExpr<bool>> output3 /*= default(TIcbRefCntPtr<TExpr<bool>>)*/;
                    int pos3 = pos2;
                    if(nt_BOOL_EXPR(pos3, output3)) {
                        output = new CExprOperatorOfBool(output1, output, output3);
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_BOOL_OP(int& pos, EOperator& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '=')) {
                output = Operator_EQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("<>"), 2)) {
                output = Operator_UNEQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("AND"), 3)) {
                output = Operator_AND;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("OR"), 2)) {
                output = Operator_OR;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_BOOL_EXPR2(int& pos, TIcbRefCntPtr<TExpr<bool>>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '(')) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_BOOL_EXPR(pos3, output)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(tc(pos5, ')')) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("NOT"), 3)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    TIcbRefCntPtr<TExpr<bool>> output3 /*= default(TIcbRefCntPtr<TExpr<bool>>)*/;
                    int pos3 = pos2;
                    if(nt_BOOL_EXPR2(pos3, output3)) {
                        output = new CExprBoolNotBool(output3);
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(nt_BOOL_SYMBOL(pos1, output)) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(nt_BOOL_OPSTRING(pos1, output)) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(nt_BOOL_OPDATETIME(pos1, output)) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(nt_BOOL_OPTIME(pos1, output)) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_BOOL_SYMBOL(int& pos, TIcbRefCntPtr<TExpr<bool>>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("FALSE"), 5)) {
                output = new TExprConst<bool>(false);
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("TRUE"), 4)) {
                output = new TExprConst<bool>(true);
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("HASATTR"), 7)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(tc(pos3, '(')) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            TIcbRefCntPtr<TExpr<CIcbString>> output5 /*= default(TIcbRefCntPtr<TExpr<CIcbString>>)*/;
                            int pos5 = pos4;
                            if(nt_STRING_EXPR(pos5, output5)) {
                                void* output6 /*= default(void*)*/;
                                int pos6 = pos5;
                                if(nt_WS(pos6, output6)) {
                                    int pos7 = pos6;
                                    if(tc(pos7, ')')) {
                                        output = new TExprFunc1<bool, CIcbString>(&CExprFunc::HASATTR, output5);
                                        pos = pos7;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    bool nt_BOOL_OPSTRING(int& pos, TIcbRefCntPtr<TExpr<bool>>& output) {
        int pos0 = pos;
        if(true) {
            TIcbRefCntPtr<TExpr<CIcbString>> output1 /*= default(TIcbRefCntPtr<TExpr<CIcbString>>)*/;
            int pos1 = pos0;
            if(nt_STRING_EXPR(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    EOperator output3 /*= default(EOperator)*/;
                    int pos3 = pos2;
                    if(nt_STRING_OP(pos3, output3)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            TIcbRefCntPtr<TExpr<CIcbString>> output5 /*= default(TIcbRefCntPtr<TExpr<CIcbString>>)*/;
                            int pos5 = pos4;
                            if(nt_STRING_EXPR(pos5, output5)) {
                                output = new CExprOperatorOfString(output3, output1, output5);
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    bool nt_STRING_OP(int& pos, EOperator& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '=')) {
                output = Operator_EQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("<>"), 2)) {
                output = Operator_UNEQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("LIKE"), 4)) {
                output = Operator_LIKE;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("NOT"), 3)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(ts(pos3, _T("LIKE"), 4)) {
                        output = Operator_NOTLIKE;
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_STRING_EXPR(int& pos, TIcbRefCntPtr<TExpr<CIcbString>>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '(')) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_STRING_EXPR(pos3, output)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(tc(pos5, ')')) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(nt_STRING_SYMBOL(pos1, output)) {
                pos = pos1;
                return true;
            }
        }
        if(true) {
            CIcbString output1 /*= default(CIcbString)*/;
            int pos1 = pos0;
            if(nt_STRING_CONST(pos1, output1)) {
                output = new TExprConst<CIcbString>(output1);
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_STRING_SYMBOL(int& pos, TIcbRefCntPtr<TExpr<CIcbString>>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("EV_LEVEL"), 8)) {
                output = new TExprFunc0<CIcbString>(&CExprFunc::EV_LEVEL);
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("EV_TEXT"), 7)) {
                output = new TExprFunc0<CIcbString>(&CExprFunc::EV_TEXT);
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("LOWER"), 5)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(tc(pos3, '(')) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            TIcbRefCntPtr<TExpr<CIcbString>> output5 /*= default(TIcbRefCntPtr<TExpr<CIcbString>>)*/;
                            int pos5 = pos4;
                            if(nt_STRING_EXPR(pos5, output5)) {
                                void* output6 /*= default(void*)*/;
                                int pos6 = pos5;
                                if(nt_WS(pos6, output6)) {
                                    int pos7 = pos6;
                                    if(tc(pos7, ')')) {
                                        output = new TExprFunc1<CIcbString, CIcbString>(&CExprFunc::LOWER, output5);
                                        pos = pos7;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("UPPER"), 5)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(tc(pos3, '(')) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            TIcbRefCntPtr<TExpr<CIcbString>> output5 /*= default(TIcbRefCntPtr<TExpr<CIcbString>>)*/;
                            int pos5 = pos4;
                            if(nt_STRING_EXPR(pos5, output5)) {
                                void* output6 /*= default(void*)*/;
                                int pos6 = pos5;
                                if(nt_WS(pos6, output6)) {
                                    int pos7 = pos6;
                                    if(tc(pos7, ')')) {
                                        output = new TExprFunc1<CIcbString, CIcbString>(&CExprFunc::UPPER, output5);
                                        pos = pos7;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("ATTR"), 4)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(tc(pos3, '(')) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            TIcbRefCntPtr<TExpr<CIcbString>> output5 /*= default(TIcbRefCntPtr<TExpr<CIcbString>>)*/;
                            int pos5 = pos4;
                            if(nt_STRING_EXPR(pos5, output5)) {
                                void* output6 /*= default(void*)*/;
                                int pos6 = pos5;
                                if(nt_WS(pos6, output6)) {
                                    int pos7 = pos6;
                                    if(tc(pos7, ')')) {
                                        output = new TExprFunc1<CIcbString, CIcbString>(&CExprFunc::ATTR,  output5);
                                        pos = pos7;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    bool nt_STRING_CONST(int& pos, CIcbString& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '\'')) {
                TIcbArray<TCHAR> output2 /*= default(TIcbArray<TCHAR>)*/;
                int pos2 = pos1;
                if(nt_STRING_CHARS(pos2, output2)) {
                    int pos3 = pos2;
                    if(tc(pos3, '\'')) {
                        output = CIcbString(output2.GetData(), output2.GetSize());
                        pos = pos3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool nt_STRING_CHARS(int& pos, TIcbArray<TCHAR>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(nt_STRING_CHAR(pos1, output)) {
                int pos2 = pos1;
                if(nt_STRING_CHARS(pos2, output)) {
                    pos = pos2;
                    return true;
                }
            }
        }
        if(true) {
            pos = pos0;
            return true;
        }
    }

    bool nt_STRING_CHAR(int& pos, TIcbArray<TCHAR>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("\'\'"), 2)) {
                output.Add('\'');
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tnotset(pos1, _T("\'\r\n"), 3)) {
                output.Add(_input[pos0]);
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_BOOL_OPDATETIME(int& pos, TIcbRefCntPtr<TExpr<bool>>& output) {
        int pos0 = pos;
        if(true) {
            TIcbRefCntPtr<TExpr<CIcbDateTime>> output1 /*= default(TIcbRefCntPtr<TExpr<CIcbDateTime>>)*/;
            int pos1 = pos0;
            if(nt_DATETIME_EXPR(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    EOperator output3 /*= default(EOperator)*/;
                    int pos3 = pos2;
                    if(nt_DATETIME_OP(pos3, output3)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            TIcbRefCntPtr<TExpr<CIcbDateTime>> output5 /*= default(TIcbRefCntPtr<TExpr<CIcbDateTime>>)*/;
                            int pos5 = pos4;
                            if(nt_DATETIME_EXPR(pos5, output5)) {
                                output = new TExprOperator<CIcbDateTime>(output3, output1, output5);
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    bool nt_DATETIME_OP(int& pos, EOperator& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '=')) {
                output = Operator_EQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("<>"), 2)) {
                output = Operator_UNEQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("<="), 2)) {
                output = Operator_BEFOREEQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '<')) {
                output = Operator_BEFORE;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T(">="), 2)) {
                output = Operator_AFTEREQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '>')) {
                output = Operator_AFTER;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_DATETIME_EXPR(int& pos, TIcbRefCntPtr<TExpr<CIcbDateTime>>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '(')) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_DATETIME_EXPR(pos3, output)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(tc(pos5, ')')) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(nt_DATETIME_SYMBOL(pos1, output)) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_DATETIME_SYMBOL(int& pos, TIcbRefCntPtr<TExpr<CIcbDateTime>>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("EV_DATETIME"), 11)) {
                output = new TExprFunc0<CIcbDateTime>(&CExprFunc::EV_DATETIME);
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("DATETIME"), 8)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(tc(pos3, '(')) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            TIcbRefCntPtr<TExpr<CIcbString>> output5 /*= default(TIcbRefCntPtr<TExpr<CIcbString>>)*/;
                            int pos5 = pos4;
                            if(nt_STRING_EXPR(pos5, output5)) {
                                void* output6 /*= default(void*)*/;
                                int pos6 = pos5;
                                if(nt_WS(pos6, output6)) {
                                    int pos7 = pos6;
                                    if(tc(pos7, ')')) {
                                        output = new TExprFunc1<CIcbDateTime, CIcbString>(&CExprFunc::DATETIME, output5);
                                        pos = pos7;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    bool nt_BOOL_OPTIME(int& pos, TIcbRefCntPtr<TExpr<bool>>& output) {
        int pos0 = pos;
        if(true) {
            TIcbRefCntPtr<TExpr<CIcbTime>> output1 /*= default(TIcbRefCntPtr<TExpr<CIcbTime>>)*/;
            int pos1 = pos0;
            if(nt_TIME_EXPR(pos1, output1)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    EOperator output3 /*= default(EOperator)*/;
                    int pos3 = pos2;
                    if(nt_TIME_OP(pos3, output3)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            TIcbRefCntPtr<TExpr<CIcbTime>> output5 /*= default(TIcbRefCntPtr<TExpr<CIcbTime>>)*/;
                            int pos5 = pos4;
                            if(nt_TIME_EXPR(pos5, output5)) {
                                output = new TExprOperator<CIcbTime>(output3, output1, output5);
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    bool nt_TIME_OP(int& pos, EOperator& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '=')) {
                output = Operator_EQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("<>"), 2)) {
                output = Operator_UNEQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("<="), 2)) {
                output = Operator_BEFOREEQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '<')) {
                output = Operator_BEFORE;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T(">="), 2)) {
                output = Operator_AFTEREQUAL;
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '>')) {
                output = Operator_AFTER;
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_TIME_EXPR(int& pos, TIcbRefCntPtr<TExpr<CIcbTime>>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(tc(pos1, '(')) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(nt_TIME_EXPR(pos3, output)) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            int pos5 = pos4;
                            if(tc(pos5, ')')) {
                                pos = pos5;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        if(true) {
            int pos1 = pos0;
            if(nt_TIME_SYMBOL(pos1, output)) {
                pos = pos1;
                return true;
            }
        }
        return false;
    }

    bool nt_TIME_SYMBOL(int& pos, TIcbRefCntPtr<TExpr<CIcbTime>>& output) {
        int pos0 = pos;
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("EV_TIME"), 7)) {
                output = new TExprFunc0<CIcbTime>(&CExprFunc::EV_TIME);
                pos = pos1;
                return true;
            }
        }
        if(true) {
            int pos1 = pos0;
            if(ts(pos1, _T("TIME"), 4)) {
                void* output2 /*= default(void*)*/;
                int pos2 = pos1;
                if(nt_WS(pos2, output2)) {
                    int pos3 = pos2;
                    if(tc(pos3, '(')) {
                        void* output4 /*= default(void*)*/;
                        int pos4 = pos3;
                        if(nt_WS(pos4, output4)) {
                            TIcbRefCntPtr<TExpr<CIcbString>> output5 /*= default(TIcbRefCntPtr<TExpr<CIcbString>>)*/;
                            int pos5 = pos4;
                            if(nt_STRING_EXPR(pos5, output5)) {
                                void* output6 /*= default(void*)*/;
                                int pos6 = pos5;
                                if(nt_WS(pos6, output6)) {
                                    int pos7 = pos6;
                                    if(tc(pos7, ')')) {
                                        output = new TExprFunc1<CIcbTime, CIcbString>(&CExprFunc::TIME, output5);
                                        pos = pos7;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    bool ts(int& pos, const TCHAR* s, int slen) {
        for(int i = 0; i < slen; i++) {
            if(pos >= _size || _input[pos] != s[i]) return false;
            pos++;
        }
        return true;
    }

    bool tc(int& pos, TCHAR c) {
        if(pos >= _size || _input[pos] != c) return false;
        pos++;
        return true;
    }

    bool tset(int& pos, const TCHAR* s, int slen) {
        for(int i = 0; i < slen; i++) {
            if(pos < _size && s[i] == _input[pos]) {
                pos++;
                return true;
            }
        }
        return false;
    }

    bool tnotset(int& pos, const TCHAR* s, int slen) {
        for(int i = 0; i < slen; i++) {
            if(pos >= _size || s[i] == _input[pos]) {
                return false;
            }
        }
        pos++;
        return true;
    }

};
